DROP TABLE IF EXISTS VOTECOMMENT;
DROP TABLE IF EXISTS COMMENT;
DROP TABLE IF EXISTS VOTESTORY;
DROP TABLE IF EXISTS STORY;
DROP TABLE IF EXISTS POST;
DROP TABLE IF EXISTS UTILAISER;
DROP TABLE IF EXISTS IMAGES;
DROP TABLE IF EXISTS PROFILE;

CREATE TABLE UTILAISER
(
	username TEXT NOT NULL PRIMARY KEY,
	password VARCHAR(50) NOT NULL,
	email TEXT NOT NULL UNIQUE
);

CREATE TABLE POST
(
	postID INTEGER PRIMARY KEY
);

CREATE TABLE STORY
(
    postID INTEGER REFERENCES POST,
    title TEXT,
    description TEXT,
    PRIMARY KEY(postID)
);

CREATE TABLE VOTESTORY
(
	username TEXT NOT NULL REFERENCES UTILAISER,
	storyID INTEGER REFERENCES STORY,
	vote INTEGER NOT NULL Check (vote = -1 OR vote = 1),
	PRIMARY KEY(username,storyID)
);


CREATE TABLE COMMENT
(
    username TEXT NOT NULL REFERENCES UTILAISER,
    postID INTEGER REFERENCES POST,
	/*Porque podes ter
	comentarios dentro de comentarios e
	respostas em dois filhos em simultaneo
	commentID INTEGER PRIMARY KEY, IGNOREM ISTO*/
	commentID INTEGER ALTERNATE KEY,
	description TEXT,
    postTime DATETIME,
    /*PRIMARY KEY(postTime,username,postID)*/
    PRIMARY KEY(postTime,username,postID,commentID)/*Penso estar correcto*/
	);


CREATE TABLE VOTECOMMENT
(
	username TEXT NOT NULL REFERENCES UTILAISER,
	commentID INTEGER REFERENCES COMMENT,
	vote INTEGER NOT NULL Check (vote = -1 OR vote = 1),
	PRIMARY KEY(username,commentID)
);


CREATE TABLE IMAGES (
 imageID INTEGER PRIMARY KEY,
 file_name TEXT NOT NULL
);

CREATE TABLE PROFILE (
 username TEXT NOT NULL REFERENCES UTILAISER,
 firstName TEXT NOT NULL,
 lastName TEXT NOT NULL,
 age INTEGER NOT NULL,
 imageID INTEGER REFERENCES IMAGES,
 PRIMARY KEY(username)
);
